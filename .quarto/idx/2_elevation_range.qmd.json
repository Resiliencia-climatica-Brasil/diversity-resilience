{"title":"Amplitude altitudinal","markdown":{"yaml":{"title":"Amplitude altitudinal","jupyter":"python3"},"headingText":"Importando pacotes e inicializando geemap","containsRefs":false,"markdown":"\n\n\n\n\n```{python}\nimport os\nimport ee\nimport geemap\n```\n\n```{python}\ngeemap.ee_initialize()\n```\n\n\n## Cálculo da amplitude altitudinal\n\nA amplitude altitudinal foi calculada como a diferença entre a altitude máxima e mínima dentro da vizinhaça da célula focal. \nComo essa métrica é correlacionada com a variedade de formas de relevo, nós calculamos o resíduos de uma \nregressão (*Ordinary Least Squares*) entre as duas váriaveis [@anderson_resilient_2016]. Assim, a amplitude altitudinal residual é independente da variedade de formas de relevo. Isso permite a identificação de locais que tenham maior variabilidade microclimática que aquela proporcionada pela variedade de formas de relevo, quando calcularmos o índice de diversidade da paisagem.\n\n## Base de dados\n\nUtilizamos o Modelo Digital de Elevação (DEM) do Merit-DEM [@yamazaki_high-accuracy_2017], na escala de 90 metros. O Merit-DEM é um produto global que combina dados dos satélites do Shuttle Radar Topography Mission (SRTM) [@farr_shuttle_2007] e Advanced Land Observing Satellite (ALOS) [@tadono_t_precise_2014], permitindo a replicabilidade da metodologia em outras regiões. Além disso, o Merit-DEM corrige viéses de Modelo Digitais de Elevação gerados por imagens de satétite como *speckle noise*, *stripe noise*, *absolute bias* e *tree height bias* [@yamazaki_high-accuracy_2017]. A correção de *tree height bias* é especialmente importante para a Floresta Amazônica devido à sua densidade de árvores altas. \n\nA variedade de formas de relevo foi calculada anteriormente (veja o capítulo [Variedade de formas de relevo](https://resiliencia-climatica-brasil.github.io/diversity-resilience-python/1_landforms.html)) e está disponível como um *asset* em **[https://code.earthengine.google.com/?asset=projects/ee-lucasljardim9/assets/landform_variety](https://code.earthengine.google.com/?asset=projects/ee-lucasljardim9/assets/landform_variety)**.   \n\nAs análises foram rodadas no *Google Earth Engine* [@gorelick_google_2017], devido à demanda computacional do projeto, usando o pacote **geemap** [@wu_geemap_2020] em *Python* [@python_software_foundation_python_2023] como interface pela facilidade na documentação e reprodutividade das análises. O JupyterNotebook para a reprodução das análises pode ser encontrado em [https://github.com/Resiliencia-climatica-Brasil/diversity-resilience-python/blob/master/jupyternotebook/2_elevation_range.ipynb](https://github.com/Resiliencia-climatica-Brasil/diversity-resilience-python/blob/master/jupyternotebook/2_elevation_range.ipynb). \n\n## Códigos para o cálculo da amplitude altitudinal residual\n\nPrimeiro, importamos um vetor dos biomas do Brasil para extrairmos as coordenadas mínimas e máximas do Brasil.\n\n```{python}\n# Importando mapa de biomas do IBGE para extrair as coordenadas mínimas e máximas do Brasil\nregiao = ee.FeatureCollection(\"projects/ee-lucasljardim9/assets/Biome\")\n\ndef func_cmp(feature):\n    return feature.bounds() \n\n# Extraindo as coordenadas mínimas e máximas do Brasil\nregiao_box = regiao.map(func_cmp).geometry().dissolve(**{'maxError': 1}).bounds()\n```\n\nImportamos os *rasters* do modelo digital de elevação e da variedade de formas de relevo e definimos a resolução da análise como aquela do modelo digital de elevação.\n\n```{python}\n# Importando o modelo digital de elevação\nDEM = ee.Image(\"MERIT/DEM/v1_0_3\")\n\n# Importando a variedade de landforms calculada anteriormente\nlandform_variety = ee.Image(\"projects/ee-lucasljardim9/assets/landform_variety\")\n\n#Escala dos rasters ~92 metros\nescala = DEM.projection().nominalScale()\n```\n\nExtraímos do *raster* as células dentro da vizinhança (kernel circular com 5 células de raio, ~450 metros) da célula focal e salvamos como bandas de uma imagem. Assim, cada banda é um *stack* das células da vizinhança da célula focal, a primeira banda possui todas as primeiras células de cada célula focal, a segunda banda todas as segunda células, e assim por diante. \n\n```{python}\n# Tamanho do raio do kernel para o calculo da amplitude altitudinal\nradius_pixels = 5\n\n# Criando rasters da vizinhança de cada célula como bandas da imagem\nneighbor = DEM.neighborhoodToBands(ee.Kernel.circle(ee.Number(radius_pixels)))\n```\n\nO *raster* *neighbor* criado acima possui as células da vizinhança como bandas. Assim, as primeiras células de cada banda são as células da vizinhança da primeira célula focal, organizadas como colunas (bandas). Ao calcularmos os valores máximos e mínimos para cada coluna de *neighbor*, estamos calculando os valores máximos e mínimos da vizinhança de cada célula focal. \n\n```{python}\n# Calcule o máximo da vizinhança\nelevation_max = neighbor.reduce(ee.Reducer.max())\n\n# Calcule o mínimo da vizinhança\nelevation_min = neighbor.reduce(ee.Reducer.min())\n```\n\nSubtraindo os valores máximos e mínimos de cada célula focal e calculando o seu valor absoluto, temos a amplitude altitudinal para cada célula focal. Nós salvamos a amplitude altitudinal e variedade de formas de relevo como um *raster* com duas bandas, sendo a primeira banda a variável preditora da regressão e a segunda banda a variável resposta.\n\n```{python}\n# Calcule a amplitude da vizinhança\nelevation_range = elevation_max.subtract(elevation_min).abs()\n\n# Crie uma imagem com as bandas de varidedade de formas de relevo e amplitude altitudinal \n# A primeira imagem é o x da regressão e a segunda é o y\n\nelevation = (ee.Image.cat(landform_variety, elevation_range)\n            .rename(['landform_variety', 'elevation_range']))\n```\n\nDessa forma, aplicamos a regressão entre as variáveis.\n\n```{python}\n# Rode uma regressão linear (OLS) entre varidade formas de relevo e amplitude altitudinal\nregression = elevation.reduceRegion(**{\n     'reducer': ee.Reducer.linearFit(),\n     'geometry': regiao_box,\n     'maxPixels': 1e13,\n     'scale': escala\n    })\n```\n\nApós a regressão, multiplicamos a variável preditora pelo coeficiente de regressão (*slope*) e adicionamos o valor do intercepto para predizermos os valores de amplitude altitudinal esperados pela regressão. Em seguida, subtraímos os valores de amplitude altitudinal pelos valores preditos pela regressão para calcularmos os resíduos do modelo.\n\n```{python}\n# Calcule o valor predito, pela regressão, de amplitude altitudinal, sem intercepto \npred = elevation.select('landform_variety').multiply(ee.Number(regression.get('scale')))\n\n# Adicione o intercepto na predição\npredict = pred.add(ee.Number(regression.get('offset')))\n\n# Calcule o residuo da regressão\nresiduals = elevation.select('elevation_range').subtract(predict).rename(['residuals'])\n```\n\nPor fim, exportamos o raster de amplitude altitudinal residual como um *asset* do *Google Earth Engine*.\n\n```{python}\n# Exporte a amplitude altitudinal residual como asset\n\nassetId = \"projects/ee-lucasljardim9/assets/elevation_range_residual\"\n\ngeemap.ee_export_image_to_asset(\n    residuals, \n    description='elevation_range_residual', \n    assetId=assetId, \n    region=regiao_box, \n    scale=escala, \n    maxPixels=1e13\n)\n```\n\n","srcMarkdownNoYaml":"\n\n\n\n## Importando pacotes e inicializando geemap\n\n```{python}\nimport os\nimport ee\nimport geemap\n```\n\n```{python}\ngeemap.ee_initialize()\n```\n\n\n## Cálculo da amplitude altitudinal\n\nA amplitude altitudinal foi calculada como a diferença entre a altitude máxima e mínima dentro da vizinhaça da célula focal. \nComo essa métrica é correlacionada com a variedade de formas de relevo, nós calculamos o resíduos de uma \nregressão (*Ordinary Least Squares*) entre as duas váriaveis [@anderson_resilient_2016]. Assim, a amplitude altitudinal residual é independente da variedade de formas de relevo. Isso permite a identificação de locais que tenham maior variabilidade microclimática que aquela proporcionada pela variedade de formas de relevo, quando calcularmos o índice de diversidade da paisagem.\n\n## Base de dados\n\nUtilizamos o Modelo Digital de Elevação (DEM) do Merit-DEM [@yamazaki_high-accuracy_2017], na escala de 90 metros. O Merit-DEM é um produto global que combina dados dos satélites do Shuttle Radar Topography Mission (SRTM) [@farr_shuttle_2007] e Advanced Land Observing Satellite (ALOS) [@tadono_t_precise_2014], permitindo a replicabilidade da metodologia em outras regiões. Além disso, o Merit-DEM corrige viéses de Modelo Digitais de Elevação gerados por imagens de satétite como *speckle noise*, *stripe noise*, *absolute bias* e *tree height bias* [@yamazaki_high-accuracy_2017]. A correção de *tree height bias* é especialmente importante para a Floresta Amazônica devido à sua densidade de árvores altas. \n\nA variedade de formas de relevo foi calculada anteriormente (veja o capítulo [Variedade de formas de relevo](https://resiliencia-climatica-brasil.github.io/diversity-resilience-python/1_landforms.html)) e está disponível como um *asset* em **[https://code.earthengine.google.com/?asset=projects/ee-lucasljardim9/assets/landform_variety](https://code.earthengine.google.com/?asset=projects/ee-lucasljardim9/assets/landform_variety)**.   \n\nAs análises foram rodadas no *Google Earth Engine* [@gorelick_google_2017], devido à demanda computacional do projeto, usando o pacote **geemap** [@wu_geemap_2020] em *Python* [@python_software_foundation_python_2023] como interface pela facilidade na documentação e reprodutividade das análises. O JupyterNotebook para a reprodução das análises pode ser encontrado em [https://github.com/Resiliencia-climatica-Brasil/diversity-resilience-python/blob/master/jupyternotebook/2_elevation_range.ipynb](https://github.com/Resiliencia-climatica-Brasil/diversity-resilience-python/blob/master/jupyternotebook/2_elevation_range.ipynb). \n\n## Códigos para o cálculo da amplitude altitudinal residual\n\nPrimeiro, importamos um vetor dos biomas do Brasil para extrairmos as coordenadas mínimas e máximas do Brasil.\n\n```{python}\n# Importando mapa de biomas do IBGE para extrair as coordenadas mínimas e máximas do Brasil\nregiao = ee.FeatureCollection(\"projects/ee-lucasljardim9/assets/Biome\")\n\ndef func_cmp(feature):\n    return feature.bounds() \n\n# Extraindo as coordenadas mínimas e máximas do Brasil\nregiao_box = regiao.map(func_cmp).geometry().dissolve(**{'maxError': 1}).bounds()\n```\n\nImportamos os *rasters* do modelo digital de elevação e da variedade de formas de relevo e definimos a resolução da análise como aquela do modelo digital de elevação.\n\n```{python}\n# Importando o modelo digital de elevação\nDEM = ee.Image(\"MERIT/DEM/v1_0_3\")\n\n# Importando a variedade de landforms calculada anteriormente\nlandform_variety = ee.Image(\"projects/ee-lucasljardim9/assets/landform_variety\")\n\n#Escala dos rasters ~92 metros\nescala = DEM.projection().nominalScale()\n```\n\nExtraímos do *raster* as células dentro da vizinhança (kernel circular com 5 células de raio, ~450 metros) da célula focal e salvamos como bandas de uma imagem. Assim, cada banda é um *stack* das células da vizinhança da célula focal, a primeira banda possui todas as primeiras células de cada célula focal, a segunda banda todas as segunda células, e assim por diante. \n\n```{python}\n# Tamanho do raio do kernel para o calculo da amplitude altitudinal\nradius_pixels = 5\n\n# Criando rasters da vizinhança de cada célula como bandas da imagem\nneighbor = DEM.neighborhoodToBands(ee.Kernel.circle(ee.Number(radius_pixels)))\n```\n\nO *raster* *neighbor* criado acima possui as células da vizinhança como bandas. Assim, as primeiras células de cada banda são as células da vizinhança da primeira célula focal, organizadas como colunas (bandas). Ao calcularmos os valores máximos e mínimos para cada coluna de *neighbor*, estamos calculando os valores máximos e mínimos da vizinhança de cada célula focal. \n\n```{python}\n# Calcule o máximo da vizinhança\nelevation_max = neighbor.reduce(ee.Reducer.max())\n\n# Calcule o mínimo da vizinhança\nelevation_min = neighbor.reduce(ee.Reducer.min())\n```\n\nSubtraindo os valores máximos e mínimos de cada célula focal e calculando o seu valor absoluto, temos a amplitude altitudinal para cada célula focal. Nós salvamos a amplitude altitudinal e variedade de formas de relevo como um *raster* com duas bandas, sendo a primeira banda a variável preditora da regressão e a segunda banda a variável resposta.\n\n```{python}\n# Calcule a amplitude da vizinhança\nelevation_range = elevation_max.subtract(elevation_min).abs()\n\n# Crie uma imagem com as bandas de varidedade de formas de relevo e amplitude altitudinal \n# A primeira imagem é o x da regressão e a segunda é o y\n\nelevation = (ee.Image.cat(landform_variety, elevation_range)\n            .rename(['landform_variety', 'elevation_range']))\n```\n\nDessa forma, aplicamos a regressão entre as variáveis.\n\n```{python}\n# Rode uma regressão linear (OLS) entre varidade formas de relevo e amplitude altitudinal\nregression = elevation.reduceRegion(**{\n     'reducer': ee.Reducer.linearFit(),\n     'geometry': regiao_box,\n     'maxPixels': 1e13,\n     'scale': escala\n    })\n```\n\nApós a regressão, multiplicamos a variável preditora pelo coeficiente de regressão (*slope*) e adicionamos o valor do intercepto para predizermos os valores de amplitude altitudinal esperados pela regressão. Em seguida, subtraímos os valores de amplitude altitudinal pelos valores preditos pela regressão para calcularmos os resíduos do modelo.\n\n```{python}\n# Calcule o valor predito, pela regressão, de amplitude altitudinal, sem intercepto \npred = elevation.select('landform_variety').multiply(ee.Number(regression.get('scale')))\n\n# Adicione o intercepto na predição\npredict = pred.add(ee.Number(regression.get('offset')))\n\n# Calcule o residuo da regressão\nresiduals = elevation.select('elevation_range').subtract(predict).rename(['residuals'])\n```\n\nPor fim, exportamos o raster de amplitude altitudinal residual como um *asset* do *Google Earth Engine*.\n\n```{python}\n# Exporte a amplitude altitudinal residual como asset\n\nassetId = \"projects/ee-lucasljardim9/assets/elevation_range_residual\"\n\ngeemap.ee_export_image_to_asset(\n    residuals, \n    description='elevation_range_residual', \n    assetId=assetId, \n    region=regiao_box, \n    scale=escala, \n    maxPixels=1e13\n)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"output-file":"2_elevation_range.html"},"language":{"toc-title-document":"Índice","toc-title-website":"Nesta página","related-formats-title":"Outros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fonte","section-title-abstract":"Resumo","section-title-appendices":"Apêndices","section-title-footnotes":"Notas de rodapé","section-title-references":"Referências","section-title-reuse":"Reuso","section-title-copyright":"Direito autoral","section-title-citation":"Citação","appendix-attribution-cite-as":"Por favor, cite este trabalho como:","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Autor","title-block-author-plural":"Autores","title-block-affiliation-single":"Afiliação","title-block-affiliation-plural":"Afiliações","title-block-published":"Data de Publicação","title-block-modified":"Data de Modificação","callout-tip-title":"Dica","callout-note-title":"Nota","callout-warning-title":"Aviso","callout-important-title":"Importante","callout-caution-title":"Cuidado","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar o código","code-tools-hide-all-code":"Esconder o código","code-tools-view-source":"Ver o código fonte","code-tools-source-code":"Código fonte","code-line":"Linha","code-lines":"Linhas","copy-button-tooltip":"Copiar para a área de transferência","copy-button-tooltip-success":"Copiada","repo-action-links-edit":"Editar essa página","repo-action-links-source":"Ver o código fonte","repo-action-links-issue":"Criar uma issue","back-to-top":"De volta ao topo","search-no-results-text":"Nenhum resultado","search-matching-documents-text":"documentos correspondentes","search-copy-link-title":"Copiar link para a busca","search-hide-matches-text":"Esconder correspondências adicionais","search-more-match-text":"mais correspondência neste documento","search-more-matches-text":"mais correspondências neste documento","search-clear-button-title":"Limpar","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search":"Procurar","toggle-section":"Alternar seção","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo escuro","toggle-reader-mode":"Alternar modo de leitor","toggle-navigation":"Alternar de navegação","crossref-fig-title":"Figura","crossref-tbl-title":"Tabela","crossref-lst-title":"Listagem","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolário","crossref-prp-title":"Proposição","crossref-cnj-title":"Conjetura","crossref-def-title":"Definição","crossref-exm-title":"Exemplo","crossref-exr-title":"Exercício","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apêndice","crossref-sec-prefix":"Seção","crossref-eq-prefix":"Equação","crossref-lof-title":"Lista de Figuras","crossref-lot-title":"Lista de Tabelas","crossref-lol-title":"Lista de Listagens","environment-proof-title":"Comprovação","environment-remark-title":"Comentário","environment-solution-title":"Solução","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Pré-selecionado","listing-page-order-by-date-asc":"Mais velho","listing-page-order-by-date-desc":"O mais novo","listing-page-order-by-number-desc":"Decrescente","listing-page-order-by-number-asc":"Crescente","listing-page-field-date":"Data","listing-page-field-title":"Título","listing-page-field-description":"Descrição","listing-page-field-author":"Autor","listing-page-field-filename":"Nome do arquivo","listing-page-field-filemodified":"Arquivo modificado","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tempo de leitura","listing-page-field-categories":"Categorias","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Tudo","listing-page-no-matches":"Nenhum item correspondente"},"metadata":{"lang":"pt-br","fig-responsive":true,"quarto-version":"1.3.340","bibliography":["bibliografia.bib"],"csl":"citation_style.csl","theme":"default","title":"Amplitude altitudinal","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}